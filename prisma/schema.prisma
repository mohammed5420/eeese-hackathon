// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    isNew         Int       @default(1)
    accounts      Account[]
    sessions      Session[]
    Company       Company[]
    role          ROLE      @default(USER)
    Person        Person[]
}

model Person {
    id           Int            @id @default(autoincrement())
    createdAt    DateTime       @default(now()) @db.DateTime(6)
    updatedAt    DateTime       @default(now()) @db.DateTime(6)
    deletedAt    DateTime?      @db.DateTime(6)
    user         User           @relation(fields: [userId], references: [id])
    userId       String
    Social_links Social_links[]
    bio          String
    year_of_exp  Int            @default(0)
    location     String
    Application  Application[]
    Pinned       Pinned[]
}

model Company {
    id           Int            @id @default(autoincrement())
    createdAt    DateTime       @default(now()) @db.DateTime(6)
    updatedAt    DateTime       @default(now()) @db.DateTime(6)
    deletedAt    DateTime?      @db.DateTime(6)
    user         User           @relation(fields: [userId], references: [id])
    userId       String
    Social_links Social_links[]
    location     String
    Job          Job[]
    bio          String
}

model Job {
    id              Int               @id @default(autoincrement())
    createdAt       DateTime          @default(now()) @db.DateTime(6)
    updatedAt       DateTime          @default(now()) @db.DateTime(6)
    deletedAt       DateTime?         @db.DateTime(6)
    jobDescription  String
    title           String
    jobType         JobType
    salary          Float
    jobOption       JobOption
    companyId       Int
    company         Company           @relation(fields: [companyId], references: [id])
    JotRequirements JobRequirements[]
    Status          JobStatus
    Application     Application[]
}

model Application {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now()) @db.DateTime(6)
    updatedAt DateTime  @default(now()) @db.DateTime(6)
    deletedAt DateTime? @db.DateTime(6)
    job       Job       @relation(fields: [jobId], references: [id])
    jobId     Int
    person    Person    @relation(fields: [personId], references: [id])
    personId  Int
    Pinned    Pinned[]
}

model JobRequirements {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now()) @db.DateTime(6)
    updatedAt DateTime  @default(now()) @db.DateTime(6)
    deletedAt DateTime? @db.DateTime(6)
    job       Job       @relation(fields: [jobId], references: [id])
    jobId     Int
    text      String
}

model Social_links {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now()) @db.DateTime(6)
    updatedAt DateTime  @default(now()) @db.DateTime(6)
    deletedAt DateTime? @db.DateTime(6)
    name      String
    url       String
    Company   Company?  @relation(fields: [companyId], references: [id])
    companyId Int?
    Person    Person?   @relation(fields: [personId], references: [id])
    personId  Int?
}

model Pinned {
    id            Int         @id @default(autoincrement())
    createdAt     DateTime    @default(now()) @db.DateTime(6)
    updatedAt     DateTime    @default(now()) @db.DateTime(6)
    deletedAt     DateTime?   @db.DateTime(6)
    application   Application @relation(fields: [applicationId], references: [id])
    Person        Person?     @relation(fields: [personId], references: [id])
    personId      Int?
    applicationId Int
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum JobType {
    FULLTIME
    PARTTIME
}

enum JobOption {
    ONSITE
    REMOTE
}

enum JobStatus {
    ACTIVE
    INACTIVE
}

enum ROLE {
    COMPANY
    USER
}
